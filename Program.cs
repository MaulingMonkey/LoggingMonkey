using System;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;

namespace LoggingMonkey {
	public static class Program {

#if DEBUG
		public static readonly string PrimaryPrefix = "http://logs.localhost/";
		//public static readonly string PrimaryPrefix = "http://logs2.pandamojo.com" + (Platform.IsOnUnix?":8080":"") + "/";
#else
		public static readonly string PrimaryPrefix = "http://logs.pandamojo.com" + (Platform.IsOnUnix?":8080":"") + "/";
#endif

		public static readonly CultureInfo Culture = new CultureInfo("en-US",false);

		public static readonly string AuthCookieName = "LoggingMonkeyAuth";
		public static bool AutoAllow { get { return !Platform.IsOnUnix && File.Exists( Paths.AutoAllowTxt ); } }

		static string GuessAndPrependProtocol( string url ) {
			Match m = Regexps.UrlProtocol.Match(url);
			if ( m.Success ) return url;
			else if ( url.StartsWith("www.") ) return "http://"+url;
			else if ( url.StartsWith("ftp.") ) return "ftp://"+url;
			else return "http://"+url;
		}

		public static string HtmlizeUrls( string text, bool cats ) {
			return Regexps.UrlPatterns.Replace( text, m => {
				var url=GuessAndPrependProtocol(m.Value);

				if ( cats && url.StartsWith("http://zao.se/~zao/cats/") ) return "<img src=\""+url+"\" alt=\"cats\">";

				return "<a rel=\"nofollow\" class=\"link\" target=\"_blank\" href=\""+url+"\">"+m.Value+"</a>";
			});
		}

		static void Main() {
			Debug.LogReleaseExceptions( () => Work() );
		}

		static void Work() {
			try {
				Console.CancelKeyPress += (sender,args) => {
					args.Cancel = true;
				};
			} catch ( NullReferenceException ) {
				// generated by *nix when run in the background?
			}

			var procstart = DateTime.Now;
			Debug.WriteLine( "=== Process start at {0} ===", procstart );

			var logpattern = Paths.LogsDirectory+"{network}-{channel}-{year}-{month}-{day}.log";
#if DEBUG
			var channels = new[] { "#sparta" };
			//var whitelistChannels = new[] { "#sparta" };
			var whitelistChannels = new string[0];
#else
			var channels = new[] { "#gamedev", "#graphicschat", "#graphicsdev", "#anime", "#starcraft" };
			var whitelistChannels = new[] { "#gamedev" };
#endif
			var logs = new AllLogs() { { "irc.afternet.org", new NetworkLogs("irc.afternet.org",logpattern) } };
			var afternet = logs["irc.afternet.org"];
			foreach ( var ch in channels ) afternet.Channel(ch);
			foreach ( var ch in whitelistChannels ) afternet.Channel(ch).RequireAuth = true;
			afternet.Channel("#gamedev");

			Debug.Write( "Beginning log server..." );
			var server = new HttpLogServer();
			Debug.WriteLine( "\rLog server started.                             " );



			Debug.Write("LoggingMonkey comming online...");
			var bot = new Network( "irc.afternet.org", channels, logs );
			var bott = new Thread(bot.Work);
			bott.Start();
			Debug.WriteLine("\rLoggingMonkey online.                            ");



			Debug.Write("Getting directory list...");
			var files = Directory
				.GetFiles(Paths.LogsDirectory, "*.log", SearchOption.TopDirectoryOnly )
				.OrderBy( file => {
					var m = Regexps.LogFilename.Match(file);
					return new DateTime
						( int.Parse(m.Groups["year"].Value)
						, int.Parse(m.Groups["month"].Value)
						, int.Parse(m.Groups["day"].Value)
						);
				})
				.ToArray()
				;



			var bglogs = new AllLogs() { { "irc.afternet.org", new NetworkLogs("irc.afternet.org",logpattern) } };
			var bgafternet = bglogs["irc.afternet.org"];
			foreach ( var ch in channels ) bgafternet.Channel(ch);



			Debug.Write("Starting GC...");
			var before = GC.GetTotalMemory(false);
			var after  = GC.GetTotalMemory(true);
			Debug.WriteLine("\rFinished GC. Before: {0}  After: {1}  Saved: {2}"
				, Pretty.FormatMemory(before)
				, Pretty.FormatMemory(after)
				, Pretty.FormatMemory(before-after)
				);

			server.SetLogs(logs);
			Debug.WriteLine("Logs now being served.");

			for (;;) {
				//Console.Write("> ");
				string command;
				try {
					command = Console.ReadLine();
					if ( command == null ) for (;;) {}
				} catch ( NullReferenceException ) {
					for (;;);
				}
				var split = command.Split(new[]{' '});

				switch ( split[0] ) {
				case "help":
					Console.WriteLine("\t  Command                     Description");
					Console.WriteLine("\thelp                        displays this command list");
					Console.WriteLine("\tquit                        Quits");
					break;
				case "quit":
					return;
				default:
					Console.WriteLine( "No such command: {0}", split[0] );
					break;
				}
			}
		}
	}
}
